/*
 * EcoFarm IoT - ESP32 Gateway
 * Fungsi: Menerima data dari ESP32 Sensor Node, kirim ke Web Server
 */

#include <WiFi.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <SPIFFS.h>

// WiFi Configuration
const char* ssid = "RAFALEON";
const char* password = "11112222";

// Web Server Configuration
const char* web_server_url = "http://your-web-server.com/api/sensor-data"; // Ganti dengan URL web server Anda
// Atau jika lokal: "http://192.168.1.200:3000/api/sensor-data"

// Create WebServer instance
WebServer server(8080);

// Variables untuk menyimpan data terakhir
struct SensorData {
  String nodeId;
  String deviceType;
  float temperature;
  float humidity;
  bool relayStatus;
  unsigned long timestamp;
  int wifiSignal;
  unsigned long freeHeap;
  String chipId;
  unsigned long receivedAt;
};

SensorData lastSensorData;
bool dataReceived = false;
unsigned long lastWebSend = 0;
const unsigned long WEB_SEND_INTERVAL = 10000; // Send to web every 10 seconds

void setup() {
  Serial.begin(115200);
  
  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå SPIFFS Mount Failed");
  } else {
    Serial.println("‚úÖ SPIFFS Mounted Successfully");
  }
  
  // Connect to WiFi
  connectWiFi();
  
  // Setup web server routes
  setupWebServer();
  
  // Start server
  server.begin();
  
  Serial.println("üöÄ ESP32 Gateway Started!");
  Serial.println("üì° Listening for sensor data on port 8080");
  Serial.println("üåê Web interface: http://" + WiFi.localIP().toString() + ":8080");
  Serial.println("üìä API endpoint: http://" + WiFi.localIP().toString() + ":8080/sensor-data");
  Serial.println("üìà Dashboard: http://" + WiFi.localIP().toString() + ":8080/dashboard");
}

void loop() {
  // Handle web server requests
  server.handleClient();
  
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    connectWiFi();
  }
  
  // Send data to web server periodically
  if (dataReceived && millis() - lastWebSend >= WEB_SEND_INTERVAL) {
    sendDataToWebServer();
    lastWebSend = millis();
  }
  
  delay(10);
}

void connectWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("‚úÖ WiFi connected!");
  Serial.print("üìç Gateway IP address: ");
  Serial.println(WiFi.localIP());
  Serial.print("üì∂ WiFi Signal Strength: ");
  Serial.print(WiFi.RSSI());
  Serial.println(" dBm");
}

void setupWebServer() {
  // CORS headers for all requests
  server.onNotFound([]() {
    if (server.method() == HTTP_OPTIONS) {
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.sendHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
      server.sendHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
      server.send(200);
      return;
    }
    server.send(404, "text/plain", "Not Found");
  });
  
  // Route untuk menerima data dari sensor node
  server.on("/sensor-data", HTTP_POST, handleSensorData);
  
  // Route untuk mendapatkan data terbaru (API)
  server.on("/api/latest", HTTP_GET, handleGetLatestData);
  
  // Route untuk dashboard web
  server.on("/", HTTP_GET, handleDashboard);
  server.on("/dashboard", HTTP_GET, handleDashboard);
  
  // Route untuk mendapatkan data dalam format JSON
  server.on("/api/data", HTTP_GET, handleGetApiData);
}

void handleSensorData() {
  // Add CORS headers
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  
  if (server.hasArg("plain")) {
    String body = server.arg("plain");
    Serial.println("üì® Received sensor data: " + body);
    
    // Parse JSON data
    StaticJsonDocument<500> doc;
    DeserializationError error = deserializeJson(doc, body);
    
    if (error) {
      Serial.println("‚ùå JSON parsing failed: " + String(error.c_str()));
      server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"Invalid JSON\"}");
      return;
    }
    
    // Store data
    lastSensorData.nodeId = doc["nodeId"].as<String>();
    lastSensorData.deviceType = doc["deviceType"].as<String>();
    lastSensorData.temperature = doc["temperature"];
    lastSensorData.humidity = doc["humidity"];
    lastSensorData.relayStatus = doc["relayStatus"];
    lastSensorData.timestamp = doc["timestamp"];
    lastSensorData.wifiSignal = doc["wifiSignal"];
    lastSensorData.freeHeap = doc["freeHeap"];
    lastSensorData.chipId = doc["chipId"].as<String>();
    lastSensorData.receivedAt = millis();
    
    dataReceived = true;
    
    Serial.println("‚úÖ Data stored successfully!");
    Serial.println("üå°Ô∏è  Temperature: " + String(lastSensorData.temperature) + "¬∞C");
    Serial.println("üíß Humidity: " + String(lastSensorData.humidity) + "%");
    Serial.println("üîå Relay: " + String(lastSensorData.relayStatus ? "ON" : "OFF"));
    
    // Response
    server.send(200, "application/json", 
      "{\"status\":\"success\",\"message\":\"Data received successfully\",\"timestamp\":" + String(millis()) + "}");
  } else {
    server.send(400, "application/json", "{\"status\":\"error\",\"message\":\"No data received\"}");
  }
}

void handleGetLatestData() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  
  if (!dataReceived) {
    server.send(404, "application/json", "{\"status\":\"error\",\"message\":\"No data available\"}");
    return;
  }
  
  // Create JSON response
  StaticJsonDocument<600> doc;
  doc["status"] = "success";
  doc["data"]["nodeId"] = lastSensorData.nodeId;
  doc["data"]["deviceType"] = lastSensorData.deviceType;
  doc["data"]["temperature"] = lastSensorData.temperature;
  doc["data"]["humidity"] = lastSensorData.humidity;
  doc["data"]["relayStatus"] = lastSensorData.relayStatus;
  doc["data"]["timestamp"] = lastSensorData.timestamp;
  doc["data"]["wifiSignal"] = lastSensorData.wifiSignal;
  doc["data"]["freeHeap"] = lastSensorData.freeHeap;
  doc["data"]["chipId"] = lastSensorData.chipId;
  doc["data"]["receivedAt"] = lastSensorData.receivedAt;
  doc["data"]["ageSeconds"] = (millis() - lastSensorData.receivedAt) / 1000;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  server.send(200, "application/json", jsonString);
}

void handleGetApiData() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  
  if (!dataReceived) {
    server.send(200, "application/json", "{\"temperature\":0,\"humidity\":0,\"relayStatus\":false,\"online\":false}");
    return;
  }
  
  bool isOnline = (millis() - lastSensorData.receivedAt) < 30000; // Consider online if data < 30 seconds old
  
  String json = "{";
  json += "\"temperature\":" + String(lastSensorData.temperature) + ",";
  json += "\"humidity\":" + String(lastSensorData.humidity) + ",";
  json += "\"relayStatus\":" + String(lastSensorData.relayStatus ? "true" : "false") + ",";
  json += "\"wifiSignal\":" + String(lastSensorData.wifiSignal) + ",";
  json += "\"online\":" + String(isOnline ? "true" : "false") + ",";
  json += "\"lastUpdate\":" + String((millis() - lastSensorData.receivedAt) / 1000);
  json += "}";
  
  server.send(200, "application/json", json);
}

void handleDashboard() {
  String html = R"(
<!DOCTYPE html>
<html>
<head>
    <title>EcoFarm IoT Dashboard</title>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f2f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #2c3e50; margin: 0; }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status-card h3 { margin: 0 0 10px 0; color: #34495e; }
        .status-value { font-size: 2em; font-weight: bold; margin: 10px 0; }
        .temperature { color: #e74c3c; }
        .humidity { color: #3498db; }
        .relay-on { color: #27ae60; }
        .relay-off { color: #95a5a6; }
        .online { color: #27ae60; }
        .offline { color: #e74c3c; }
        .info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .info-item { background: white; border-radius: 8px; padding: 15px; box-shadow: 0 1px 5px rgba(0,0,0,0.1); }
        .refresh-btn { background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; font-size: 16px; }
        .refresh-btn:hover { background: #2980b9; }
        .last-update { text-align: center; margin-top: 20px; color: #7f8c8d; }
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üå± EcoFarm IoT Dashboard</h1>
            <button class='refresh-btn' onclick='loadData()'>üîÑ Refresh Data</button>
        </div>
        
        <div class='status-grid'>
            <div class='status-card'>
                <h3>üå°Ô∏è Temperature</h3>
                <div class='status-value temperature' id='temperature'>--¬∞C</div>
            </div>
            <div class='status-card'>
                <h3>üíß Humidity</h3>
                <div class='status-value humidity' id='humidity'>--%</div>
            </div>
            <div class='status-card'>
                <h3>üîå Exhaust Fan</h3>
                <div class='status-value' id='relay'>--</div>
            </div>
            <div class='status-card'>
                <h3>üì° System Status</h3>
                <div class='status-value' id='status'>--</div>
            </div>
        </div>
        
        <div class='info-grid'>
            <div class='info-item'>
                <h4>üì∂ WiFi Signal</h4>
                <div id='wifi-signal'>-- dBm</div>
            </div>
            <div class='info-item'>
                <h4>‚è∞ Last Update</h4>
                <div id='last-update'>--</div>
            </div>
            <div class='info-item'>
                <h4>üÜî Node ID</h4>
                <div id='node-id'>--</div>
            </div>
            <div class='info-item'>
                <h4>üíæ Free Memory</h4>
                <div id='free-heap'>-- KB</div>
            </div>
        </div>
        
        <div class='last-update'>
            <small>Dashboard auto-refreshes every 5 seconds</small>
        </div>
    </div>

    <script>
        function loadData() {
            fetch('/api/data')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('temperature').textContent = data.temperature.toFixed(1) + '¬∞C';
                    document.getElementById('humidity').textContent = data.humidity.toFixed(1) + '%';
                    
                    const relayElement = document.getElementById('relay');
                    relayElement.textContent = data.relayStatus ? 'ON' : 'OFF';
                    relayElement.className = 'status-value ' + (data.relayStatus ? 'relay-on' : 'relay-off');
                    
                    const statusElement = document.getElementById('status');
                    statusElement.textContent = data.online ? 'ONLINE' : 'OFFLINE';
                    statusElement.className = 'status-value ' + (data.online ? 'online' : 'offline');
                    
                    document.getElementById('wifi-signal').textContent = data.wifiSignal + ' dBm';
                    document.getElementById('last-update').textContent = data.lastUpdate + 's ago';
                })
                .catch(error => {
                    console.error('Error loading data:', error);
                    document.getElementById('status').textContent = 'ERROR';
                    document.getElementById('status').className = 'status-value offline';
                });
        }

        // Load data on page load
        loadData();
        
        // Auto refresh every 5 seconds
        setInterval(loadData, 5000);
    </script>
</body>
</html>
  )";
  
  server.send(200, "text/html", html);
}

void sendDataToWebServer() {
  if (!dataReceived) return;
  
  HTTPClient http;
  http.begin(web_server_url);
  http.addHeader("Content-Type", "application/json");
  
  // Create JSON payload
  StaticJsonDocument<600> doc;
  doc["nodeId"] = lastSensorData.nodeId;
  doc["deviceType"] = lastSensorData.deviceType;
  doc["temperature"] = lastSensorData.temperature;
  doc["humidity"] = lastSensorData.humidity;
  doc["relayStatus"] = lastSensorData.relayStatus;
  doc["timestamp"] = lastSensorData.timestamp;
  doc["wifiSignal"] = lastSensorData.wifiSignal;
  doc["freeHeap"] = lastSensorData.freeHeap;
  doc["chipId"] = lastSensorData.chipId;
  doc["gatewayTimestamp"] = millis();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  Serial.println("üåê Sending data to web server...");
  
  int httpResponseCode = http.POST(jsonString);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("‚úÖ Data sent to web server! Response Code: " + String(httpResponseCode));
    Serial.println("Response: " + response);
  } else {
    Serial.println("‚ùå Error sending data to web server: " + String(httpResponseCode));
    Serial.println("Check web server URL: " + String(web_server_url));
  }
  
  http.end();
}
